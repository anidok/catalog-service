// Code generated by mockery v2.52.3. DO NOT EDIT.

package opensearch

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// FindDocumentByID provides a mock function with given fields: ctx, indexName, id
func (_m *Client) FindDocumentByID(ctx context.Context, indexName string, id string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, indexName, id)

	if len(ret) == 0 {
		panic("no return value specified for FindDocumentByID")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]interface{}, error)); ok {
		return rf(ctx, indexName, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]interface{}); ok {
		r0 = rf(ctx, indexName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, indexName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexDocument provides a mock function with given fields: ctx, id, document, indexName
func (_m *Client) IndexDocument(ctx context.Context, id string, document interface{}, indexName string) error {
	ret := _m.Called(ctx, id, document, indexName)

	if len(ret) == 0 {
		panic("no return value specified for IndexDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, string) error); ok {
		r0 = rf(ctx, id, document, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexExists provides a mock function with given fields: indexName
func (_m *Client) IndexExists(indexName string) (bool, error) {
	ret := _m.Called(indexName)

	if len(ret) == 0 {
		panic("no return value specified for IndexExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(indexName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(indexName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, indexName, searchBody
func (_m *Client) Search(ctx context.Context, indexName string, searchBody map[string]interface{}) ([]map[string]interface{}, int, error) {
	ret := _m.Called(ctx, indexName, searchBody)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []map[string]interface{}
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) ([]map[string]interface{}, int, error)); ok {
		return rf(ctx, indexName, searchBody)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) []map[string]interface{}); ok {
		r0 = rf(ctx, indexName, searchBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) int); ok {
		r1 = rf(ctx, indexName, searchBody)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]interface{}) error); ok {
		r2 = rf(ctx, indexName, searchBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
