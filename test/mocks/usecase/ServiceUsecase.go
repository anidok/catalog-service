// Code generated by mockery v2.52.3. DO NOT EDIT.

package usecase

import (
	dto "catalog-service/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceUsecase is an autogenerated mock type for the ServiceUsecase type
type ServiceUsecase struct {
	mock.Mock
}

// Search provides a mock function with given fields: ctx, query, page, limit
func (_m *ServiceUsecase) Search(ctx context.Context, query string, page int, limit int) ([]*dto.ServiceDTO, int, error) {
	ret := _m.Called(ctx, query, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*dto.ServiceDTO
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*dto.ServiceDTO, int, error)); ok {
		return rf(ctx, query, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*dto.ServiceDTO); ok {
		r0 = rf(ctx, query, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ServiceDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, query, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewServiceUsecase creates a new instance of ServiceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceUsecase {
	mock := &ServiceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
