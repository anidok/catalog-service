// Code generated by mockery v2.52.3. DO NOT EDIT.

package repository

import (
	models "catalog-service/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ServiceRepository is an autogenerated mock type for the ServiceRepository type
type ServiceRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, service
func (_m *ServiceRepository) Create(ctx context.Context, service *models.Service) error {
	ret := _m.Called(ctx, service)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Service) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ServiceRepository) FindByID(ctx context.Context, id string) (*models.Service, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Service, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Service); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, query, page, limit
func (_m *ServiceRepository) Search(ctx context.Context, query string, page int, limit int) ([]*models.Service, int, error) {
	ret := _m.Called(ctx, query, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*models.Service
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Service, int, error)); ok {
		return rf(ctx, query, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Service); ok {
		r0 = rf(ctx, query, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, query, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewServiceRepository creates a new instance of ServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceRepository {
	mock := &ServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
